#+STARTUP: indent

* What

This project demonstrates using [[https://postgrest.org][PostgREST]] with [[https://supertokens.com/][SuperTokens]].

* Why

* How

This project uses a [[file:docker-compose.yaml][docker-compose.yaml]] file to launch two services:

- postgres :: PostgreSQL database server
- postgrest :: PostgREST API and web server

It sets up the database with [[file:initdb.d-postgres/setup.sql][setup.sql]] which does a few things:

1. Create the ~anonymous~ and ~authenticator~ database roles as per
   the PostgREST documentation on [[authentication]].
2. Create the [[https://www.postgresql.org/docs/current/xml2.html][xml2]] extensions to enable easy templating in the
   database (analogous to but still quite different from [[https://www.php.net/][php]] or
   [[https://dotnet.microsoft.com/en-us/apps/aspnet][ASP.NET]], instead using [[https://www.w3.org/TR/xslt20/][XSLT]]).
3. Create a ~resource~ view to make it easier to work with [[https://www.postgresql.org/docs/current/largeobjects.html][Large Objects]]
   in the database as resource files (like stylesheets).
4. Create a ~index~ function that can be [[https://postgrest.org/en/stable/references/api/stored_procedures.html#calling-with-get][called with GET]] in PostgREST
   to return a simple "index.html" generated by applying an XSLT
   stylesheet stored as a Large Object and accessed via the ~resource~
   view.
5. Loads an XSLT stylesheet [[file:initdb.d-postgres/demo.xsl][demo.xsl]] as a Large Object to be used to
   generate the "index.html" page described above.

* Steps

** Step 1:  Check out the GitHub repository [[https://github.com/davidaventimiglia/postgrest-auth0-demo][postgrest-auth0-demo]].

#+begin_src bash
  git clone https://github.com/davidaventimiglia/postgrest-auth0-demo.git
#+end_src

** Step 2:  Set environment variables.

There are a variety of ways to do this.  One way is just to create a
~setenv.bash~ script and ~source~ it.

#+begin_src bash
  cat <<EOF > setenv.bash
  export PGRST_SERVER_PORT=<an available web port e.g. 3001>
  export PGPASSWORD=<a PostgreSQL password e.g. postgres>
  export PGUSER=<a PostgreSQL user e.g. postgres>
  export PGDATABASE=<a PostgreSQL database e.g. postgres>
  export PGPORT=<an available database port e.g. 5433> 
  export PGHOST=<database host e.g. localhost>
  EOF
  source setenv.bash
#+end_src

#+RESULTS:

** Step 3:  Launch the services with Docker Compose.

#+begin_src bash
  docker-compose up
#+end_src

or

#+begin_src bash
  docker compose up
#+end_src

** Step 4:  Go to the index page.

Open a browser to [[http://${PGHOST}:${PGRST_SERVER_PORT}/rpc/index]] and try the
"Login" link.
